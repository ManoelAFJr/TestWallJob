openapi: 3.0.3
info:
  title: Swagger Example - OpenAPI 3.0
  description: |-
   This is an example of Academica Server activity based on the OpenAPI 3.0 specification. You can learn more about
    Swagger at (https://swagger.io/tools/swagger-ui).

    Now you can help us improve the API, either by making changes to the definition itself or to the code.
    That way, over time, we can improve the API in general and expose some of the new features of the app.
     
    Some useful links:
    - [The Application repository](https://github.com/ManoelAFJr/)
  version: 1.0.0
servers:
  - url: localhost:{port}/
tags:
  - name: User registration
    description: Everything about your Users
paths:
             
  /api/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: email
          in: query
          description: The user inform email for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: string
                format:
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  
  /api/register:
    post:
        tags:
          - user
        summary: Create user
        description: This can only be done by the logged in user.
        operationId: createUser
        requestBody:
          description: Created user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/User'
        responses:
          default:
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
              application/xml:
                schema:
                  $ref: '#/components/schemas/User'    


components:
  schemas:
    User:
      required:
        - email
      type: object
      properties:
        firstName:
          type: string
          example: Paulo
        lastName:
          type: string
          example: Henrrique
        email:
          type: string
          example: ph@gmail.com
        password:
          type: string
          example: 123
  
